#lang racket/base

(require "main.rkt")

(printf "Testing \\w+: ")
(for ([i (in-range 3)])
  (display (randstr "\\w+"))
  (display " "))
(newline)

(printf "Testing \\W+: ")
(for ([i (in-range 3)])
  (display (randstr "\\W+"))
  (display " "))
(newline)

(printf "Testing \\s*: ")
(for ([i (in-range 3)])
  (display "\"")
  (display (randstr "\\s*"))
  (display "\" "))
(newline)

(printf "Testing \\S+: ")
(for ([i (in-range 3)])
  (display (randstr "\\S+"))
  (display " "))
(newline)

(printf "Testing \\d+: ")
(for ([i (in-range 3)])
  (display (randstr "\\d+"))
  (display " "))
(newline)

(printf "Testing \\D+: ")
(for ([i (in-range 3)])
  (display (randstr "\\D+"))
  (display " "))
(newline)

(printf "Testing [[:alpha:]]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:alpha:]]+"))
  (display " "))
(newline)

(printf "Testing [[:digit:]]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:digit:]]+"))
  (display " "))
(newline)

(printf "Testing [[:alphanum:]]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:alphanum:]]+"))
  (display " "))
(newline)

(printf "Testing [[:alnum:]]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:alnum:]]+"))
  (display " "))
(newline)

(printf "Testing [[:word:]]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:word:]]+"))
  (display " "))
(newline)

(printf "Testing [[:blank:]]*: ")
(for ([i (in-range 3)])
  (display "\"")
  (display (randstr "[[:blank:]]*"))
  (display "\" "))
(newline)

(printf "Testing [[:space:]]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:space:]]+"))
  (display " "))
(newline)

(printf "Testing [[:upper:]]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:upper:]]+"))
  (display " "))
(newline)

(printf "Testing [[:lower:]]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:lower:]]+"))
  (display " "))
(newline)

(printf "Testing [[:ascii:]]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:ascii:]]+"))
  (display " "))
(newline)

(printf "Testing [[:cntrl:]]*: ")
(for ([i (in-range 3)])
  (display "\"")
  (display (randstr "[[:cntrl:]]*"))
  (display "\" "))
(newline)

(printf "Testing [[:graph:]]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:graph:]]+"))
  (display " "))
(newline)

(printf "Testing [[:print:]]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:print:]]+"))
  (display " "))
(newline)

(printf "Testing [[:punct:]]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:punct:]]+"))
  (display " "))
(newline)

(printf "Testing [[:xdigit:]]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:xdigit:]]+"))
  (display " "))
(newline)

(printf "Testing [[:upper:]0-9]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:upper:]0-9]+"))
  (display " "))
(newline)

(printf "Testing [[:lower:]_]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:lower:]_]+"))
  (display " "))
(newline)

(printf "Testing [[:digit:]a-c]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:digit:]a-c]+"))
  (display " "))
(newline)

(printf "Testing [[:alpha:]0-9]+: ")
(for ([i (in-range 3)])
  (display (randstr "[[:alpha:]0-9]+"))
  (display " "))
(newline)